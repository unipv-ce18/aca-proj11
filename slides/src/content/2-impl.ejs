<div id="serial" class="step semislide" data-x="1500" data-z="1000" data-rotate-y="20">
    <h1>Serial implementation </h1>
    <ul>
        <li>Study of the morphology algorithms;</li>
        <li>Initial prototyping in MATLAB;</li>
        <li>Translation to C++ code and testing.</li>
    </ul>
    <div class="additional-content">
        <h4>reference_dilate.cpp</h4>
        <pre class="hljs cpp"><code>cv::Mat morph::dilate(const cv::Mat &image, const StrEl &strEl, const int nThreads) {
    assert(image.type() == CV_8UC1);    (1)

    cv::Size imSize = image.size();
    cv::Mat output(imSize, CV_8UC1);

    for (int y = 0; y &lt; imSize.height; ++y) {       (2)
        for (int x = 0; x &lt; imSize.width; ++x) {
            int val = 0;

            for (int j = strEl.yMin(); j &lt;= strEl.yMax(); ++j) {        (3)
                for (int i = strEl.xMin(); i &lt;= strEl.xMax(); ++i) {
                    int u = x + i;
                    int v = y + j;

                    if (v &lt; 0 || v &gt;= imSize.height) continue;      (4)
                    if (u &lt; 0 || u &gt;= imSize.width) continue;
                    if (!strEl.isSet(j, i)) continue;

                    int m = image.at&lt;uint8_t&gt;(v, u) + strEl.at(j, i);
                    if (m &gt; val) val = m;
                }
            }
            output.at&lt;uint8_t&gt;(y, x) = static_cast&lt;uint8_t&gt;(val &lt; 0xFF ? val : 0xFF);   (5)
        }
    }

    return output;
}</code></pre>
    </div>
    <div class="notes">
        <ul class="notes-domk">
           <li>
               Since the erosion shares some core operations with the dilation,
               we decided to start right away with OpenMP and implement erosion at a later time.
           </li>
            <li>Ensure that the loaded image is grayscale</li>
            <li>Saturate the result to 255 and store</li>
        </ul>
    </div>
</div>

<div id="openmp" class="step" data-z="1350" data-rel-x="280" data-rotate-y="20">
    <h1>Parallel version using OpenMP</h1>
    <pre><code>#pragma omp parallel for
    <span class="lgreen">num_threads(nThreads)</span>
    <span class="lblue">collapse(2)</span>
    <span class="amber">default(none)</span>
    <span class="red">shared(...)</span></code></pre>
    <ul>
        <li class="lgreen">&laquo;&nbsp; Threads to use</li>
        <li class="lblue">&laquo;&nbsp; Operates on the 2d image</li>
        <li class="amber">&laquo;&nbsp; No automatic variable scoping</li>
        <li class="red">&laquo;&nbsp; Share variables between threads</li>
    </ul>

    <div class="notes">
        <ul class="notes-luca">
            <li>Thread # by environment, sane defaults</li>
            <li>Full control over OMP variable treatment</li>
            <li><b>It schedules by rows, suboptimal</b></li>
        </ul>
    </div>
</div>
