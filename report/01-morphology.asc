== Morphological operators

Mathematical Morphology is a branch of Computer Vision act to the analysis and processing of geometrical structures.
The first thing we did was to perform some research on the topic, we then picked the operators we wanted to implement
and write a first concept implementation in MATLAB.

=== Dilation and erosion

_Dilation_ and _erosion_ are the two fundamental operations in morphological image processing and serve as the basis for
all the other possible morphological operations; they were originally defined for binary images, then extended to grayscale
images. We implemented them in C++, in order to get a more complex operation called skeleton.

The dilation, also known as Minkowski sum, is a process that for every pixel in an image, sums the pixel of a smaller image,
formed by a bunch of pixels, called structural element. This operator is described as:

\[ A ⊕ B = { c \space \epsilon \space E^n | c = a + b, a \space \epsilon \space A, b \space \epsilon \space B } \]

Where A is the image and B is the structural element.

image::dilation.png[700,500,align="center"]

While in grayscale morphology (the one we are going to implement), the definition is the following:

\[ (A ⊕ B)(x) = \sup_{y \space \epsilon \space B} [A(y) + B(x-y)] \]

The erosion, instead, is the opposite operation. The formula is:

\[ A ⊖ B =  c \space \epsilon \space  E^n \space | \space c + b \space  \epsilon \space A \space \forall \space b \space \epsilon \space B \]

\[ (A ⊖ B)(x) = \sup_{y \space \epsilon \space B} [A(y) - B(x-y)] \]

image::erosion.png[700,500,align="center"]

In simpler words the erosion of a point is the minimum of the points in its neighborhood, with that neighborhood defined by the structuring element.

=== Skeleton

Morphological skeletonization can be considered as a controlled erosion process. This involves shrinking the image until
the area of interest is 1 pixel wide. This can allow quick and accurate image processing on an otherwise large and
memory intensive operation.

Skeleton is a recursive algorithm whose speed highly depends on the performance of the underlying dilation and erosion
implementations.

\[ S_{n+1} = S_n \cup (I - (A ⊖ B ⊕ B)) \]

image::skeleton.png[700,500, align="center"]

A great example of using skeletonization on an image is processing fingerprints.
n MATLAB, it can be quickly accomplished by using the `bwmorph()` builtin.

