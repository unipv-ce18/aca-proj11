== Parallelization with OpenMP

In order to make the parallel implementation with OpenMP, we used an `omp parallel for` directive with `collapse(2)`
to iterate on both the axes of the image:

[source,c++]
----
#pragma omp parallel for num_threads(nThreads) collapse(2) default(none) shared(image, imSize, strEl, output)
for (int y = 0; y < imSize.height; ++y) {
    for (int x = 0; x < imSize.width; ++x) {
        // [...]
    }
}
----

The number of threads is taken from the environment and defaults to the value of `omp_get_num_procs()`.
We use `default(none)` to have full control over how OpenMP manages the variables, then we set all of them to shared.
Furthermore, the `collapse(2)` parameter is used to evenly distribute all the pixels of the image over the used threads
(i.e. to consider both the loops) and not only the rows or the columns alone.

In an analysis of this configuration we see that the image is processed by rows: a suboptimal pattern if we
want to optimize cache usage by maximizing same-pixel accesses by a single thread.

