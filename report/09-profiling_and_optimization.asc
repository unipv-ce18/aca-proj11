== Profiling and further optimization

A profiler like Intel VTune Amplifier can be used to identify bottlenecks and effective core utilization by an
executable under test.

VTune becomes effective over single and computationally expensive executions of the algorithm (i.e. with large input
images and structural elements) in order to overcome the time taken by OpenCV for decoding and re-encoding of the
images.

=== Structural element expansion

With VTune we were able to find an excessive amount of time taken in the `set1` family of intrinsics used to propagate
pixels of the structural element to all the bytes of a SIMD register for processing.

We solved this by expanding the structural element in memory to the selected SIMD instruction set size before the
execution of the algorithm and replaced the instruction with a load, obtaining a performance gain of roughly 10% across
different selection of parameters.

=== Improved edge processing

On the kernel used to process edges and corners of the image, we switched from a border check inside the inner loop
to pre-calculating the bounds of the loop to a partition of the size of the structural element. This did not cause a
visible speedup, meaning that the compiler may have been able to optimize the loop by itself.

Another optimization is to use a new kernel making use of SIMD to process the upper and lower edges of the image.
This kernel only needs to perform checks over the Y axis and operates freely over the full width of the structural
element. As predictable, the speedup highly depends on the size of the image with respect to the size of the structural
element itself.

=== Image alignment

Another optimization attempt involved allocating the image before the computation in such a way that chunks inside
the safe area are memory aligned.

The implementation is as simple as allocating a slightly larger version of the image matrix in memory (multiple of
block size) and then loading the effective image at an offset of this container, taking care of the _safe area padding_
resulting from the chosen structural element. `cv::Mat::colRange()` is then used to reference this inner image inside
the container and pass it to the processing algorithm.

Surprisingly, we did not see any performance gain from this practice; probably due to the nature of the morphological
operators involved, requiring single bytes offsets in loads and processing of odd-sized structural elements.

=== Shortcuts in Skeleton computation

An initial approach to the complexity of the morphological skeleton is to define different operations for image union
(per-pixel maximum, using Zadeh operators) and subtraction.

Two additional images with the size of the source need to be allocated in memory to store partial results and multiple
sweeps need to be performed over these images. The same execution plan can be reused.

Instead of this we managed to define a single operation using a variant of the dilation kernel and performing the
additional operations before storing the result, directly generating the next iteration of the skeleton image.
This requires only a single sweep over the source and the allocation of only one additional image in memory.

Unfortunately we decided to use this "optimized" implementation of Skeleton in the first place and we are not able to
determine any speedup over the first idea without a considerable extension of the codebase.

=== Optimization results

// TODO: Checkout an old commit and compare the execution time with the latest version with different images/SIMD type
