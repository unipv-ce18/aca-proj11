== Serial implementation

The first step a porting of the MATLAB algorithm to C/C++ for the dilation.

After we got the dilation working, we passed right to parallelization attempts. Since the erosion shares some core
operations with the dilation, we decided to start right away with OpenMP and implement erosion at a later time.

.reference_dilate.cpp
[source,c++]
----
cv::Mat morph::dilate(const cv::Mat &image, const StrEl &strEl, const int nThreads) {
    assert(image.type() == CV_8UC1);    <1>

    cv::Size imSize = image.size();
    cv::Mat output(imSize, CV_8UC1);

    for (int y = 0; y < imSize.height; ++y) {       <2>
        for (int x = 0; x < imSize.width; ++x) {
            int val = 0;

            for (int j = strEl.yMin(); j <= strEl.yMax(); ++j) {        <3>
                for (int i = strEl.xMin(); i <= strEl.xMax(); ++i) {
                    int u = x + i;
                    int v = y + j;

                    if (v < 0 || v >= imSize.height) continue;      <4>
                    if (u < 0 || u >= imSize.width) continue;
                    if (!strEl.isSet(j, i)) continue;

                    int m = image.at<uint8_t>(v, u) + strEl.at(j, i);
                    if (m > val) val = m;
                }
            }
            output.at<uint8_t>(y, x) = static_cast<uint8_t>(val < 0xFF ? val : 0xFF);   <5>
        }
    }

    return output;
}
----
<1> Ensure that the loaded image is grayscale
<2> Outer loop to process all the pixels in the image
<3> Inner loop for every pixel of the structural element
<4> Image border checks
<5> Saturate the result to 255 and store

=== Interface

Our software makes use of command line arguments to specify the path to an image to process and the structural element.
The image is converted to grayscale while the red and alpha channel of the element are used to determine its value and
intensity for every pixel.

Two executables are generated, `morph` and `morphbench`. We will use the latter to collect timings over a given number
of executions of the chosen algorithm and measure their minimum, maximum, average and standard deviation.
Environment variables allow overriding the number of threads and the variant of the algorithm.

----
$ MORPH_THREADS=4 MORPH_SIMD=sse2 ./morphbench dilate 100
Image: [randomly generated, 1280x1024]
StrEl: [randomly generated, size 9]
Using 4 cores (16 simd pixels)
Warming up... (4/4)
Benchmarking... (100/100, 9.5574ms)
Completed in 1090.57ms (min: 9.2456ms, max: 16.7421ms, avg: 10.9057ms, dev: 1.50106ms)
----
