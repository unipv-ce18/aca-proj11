:nofooter:
:imagesdir: images
:stem: latexmath
:source-highlighter: rouge
:toc: preamble

= Parallelizing Mathematical Morphology
D. Lietavec, L. Zanussi — Advanced Computer Architecture (2018-2019)

__
Our project for the course consisted in the creation and the subsequent parallelization of a set of Mathematical
Morphology operators — the result is a C++ codebase depending on OpenCV for image I/O and OpenMP, which was used
to manage the thread pool and initially plan the parallel execution of the kernel.
We will then discuss about switching to a custom planning algorithm, and observe the results.
__

== Morphological operators

Mathematical Morphology is a branch of Computer Vision act to the analysis and processing of geometrical structures.
The first thing we did was to perform some research on the topic, we then picked the operators we wanted to implement
and write a first concept implementation in MATLAB.

=== Dilation and erosion

The dilation and the erosion are the two fundamental operations in morphological image processing from which all other morphological operations are based.
They were originally defined for binary images, then extended to grayscale images.
We implemented them in C++, in order to get a more complex operation called skeleton.
The dilation, also known as Minkowski sum, is a process that for every pixel in an image, sums the pixel of a smaller image, formed by a bunch of pixels, called structural element.
This operator is described as:

latexmath:[A ⊕ B = { c \space \epsilon \space E^n | c = a + b, a \space \epsilon \space A, b \space \epsilon \space B }]

Where A is the image and B is the structural element.

image::dilation.png[700,500,align="center"]

The erosion, instead, is the opposite operation. The formula is:

latexmath:[ A ⊖ B =  c \space \epsilon \space  E^n \space | \space c + b \space  \epsilon \space A \space \forall \space b \space \epsilon \space B ]

image::erosion.png[700,500,align="center"]

In simpler words the erosion of a point is the minimum of the points in its neighborhood, with that neighborhood defined by the structuring element.

=== Skeleton

Morphological Skeletonization can be considered as a controlled erosion process. This involves shrinking the image until the area of interest is 1 pixel wide. This can allow quick and accurate image processing on an otherwise large and memory intensive operation.
A great example of using skeletonization on an image is processing fingerprints. This can be quickly accomplished using bwmorph, a built-in Matlab function which will implement the Skeletonization Morphology technique to the image.

image::skeleton.png[700,500, align="center"]

== Serial implementation

The first step was a serial implementation of the matlab algorithm for the dilation. Then, once implemented correctly, we made the erode code. Since the erosion share some core operations with the dilation, we created a core file to have both a cleaner code without too many repetitions and to optimize the program.

[source,c++]
----
cv::Mat morph::dilate(const cv::Mat &image, const StrEl &strEl, const int nThreads) {
    assert(image.type() == CV_8UC1);

    cv::Size imSize = image.size();
    cv::Mat output(imSize, CV_8UC1);

for (int y = 0; y < imSize.height; ++y) {
for (int x = 0; x < imSize.width; ++x) {

            int val = 0;

            for (int j = strEl.yMin(); j <= strEl.yMax(); ++j) {
                for (int i = strEl.xMin(); i <= strEl.xMax(); ++i) {
                    int u = x + i;
                    int v = y + j;

                    if (v < 0 || v >= imSize.height) continue;
                    if (u < 0 || u >= imSize.width) continue;
                    if (!strEl.isSet(j, i)) continue;

                    int m = image.at<uint8_t>(v, u) + strEl.at(j, i);
                    if (m > val) val = m;
                }
            }
            output.at<uint8_t>(y, x) = static_cast<uint8_t>(val < 0xFF ? val : 0xFF);
        }
    }

    return output;
}
----

== Parallelization with OpenMP

In order to make the parallel implementation with OpenMP, we used an OMP parallel directive with `collapse(2)` to iterate on both the axes of the image:

[source,c++]
----

#pragma omp parallel for num_threads(nThreads) collapse(2) default(none) shared(image, imSize, strEl, output)

----

To have full control on how OpenMP manages the variables, we set the default attribute to none, then we set our variables state to shared.

//Where needed, parallelization of these algorithms combined with the use of the right CPU features allows to achieve
//real-time HD video processing in less than 25ms.

...

include::06-custom_planning.asc[]
include::07-kernel_code_design.asc[]
include::08-simd_with_intrinsics.asc[]
include::09-profiling_and_optimization.asc[]

== Experimental results

...

== Conclusion

// Cite morph, morphbench, use of environment variables and arguments, sane defaults

// Compare compilers

// Further improvements, using OpenCL/CUDA or porting to ARM, using NEON
